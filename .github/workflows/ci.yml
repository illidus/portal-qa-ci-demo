name: Portal QA/CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
        pip install -r requirements.txt
    
    - name: Run Black formatter check
      run: black --check --diff .
    
    - name: Run Flake8 linter
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run MyPy type checker
      run: mypy api/ raster_utils.py --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Run tests with coverage
      run: |
        pytest test_api.py -v --cov=api --cov=raster_utils --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  api-integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      api:
        image: python:3.9
        ports:
          - 8000:8000
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev
    
    - name: Start API server
      run: |
        cd api
        python main.py &
        sleep 10
      env:
        PYTHONPATH: ..
    
    - name: Run API health check
      run: |
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/health/ || exit 1
    
    - name: Test API endpoints
      run: |
        # Test authentication
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/tiles/)
        if [ $response -ne 403 ]; then
          echo "Expected 403 for unauthenticated request, got $response"
          exit 1
        fi
        
        # Test with valid auth
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer demo_api_token_12345" \
          -H "Content-Type: application/json" \
          -d '{"x": 1, "y": 1, "z": 1, "layer": "test"}' \
          http://localhost:8000/tiles/)
        if [ $response -ne 200 ]; then
          echo "Expected 200 for authenticated tile creation, got $response"
          exit 1
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Run Safety check for known vulnerabilities
      run: safety check --json --output safety-report.json || true
    
    - name: Run Bandit security linter
      run: bandit -r api/ raster_utils.py -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  build-status:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, api-integration-test, security-scan]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.lint-and-format.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.api-integration-test.result }}" == "success" && \
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some CI checks failed"
          echo "BUILD_STATUS=failure" >> $GITHUB_ENV
          exit 1
        fi
    
    - name: Update commit status
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: '${{ env.BUILD_STATUS }}',
            target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
            description: 'Portal QA/CI Pipeline',
            context: 'ci/portal-qa'
          })