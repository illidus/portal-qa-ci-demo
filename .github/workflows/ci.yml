name: CI Pipeline

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start FastAPI server
      run: |
        cd app && python main.py &
        sleep 5

    - name: Test API endpoints
      run: |
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/health || exit 1
        
        curl -f -X POST http://localhost:8000/users \
          -H "Content-Type: application/json" \
          -d '{"user_id": 12345, "username": "test_user", "email": "test@example.com", "age": 25}' || exit 1
        
        curl -f -X POST http://localhost:8000/users/validate \
          -H "Content-Type: application/json" \
          -d '{"user_id": 67890, "username": "validate_user", "email": "validate@example.com", "age": 30}' || exit 1

    - name: Test API error handling
      run: |
        response_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8000/users \
          -H "Content-Type: application/json" \
          -d '{"user_id": 0, "username": "a", "email": "invalid", "age": 5}')
        
        if [ "$response_code" != "422" ]; then
          echo "Expected 422 status code for invalid data, got $response_code"
          exit 1
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ || true

    - name: Check dependencies for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-status:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "✅ All tests passed successfully!"
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some tests failed"
          echo "BUILD_STATUS=failure" >> $GITHUB_ENV
          exit 1
        fi

    - name: Create build summary
      run: |
        echo "## 🚀 Portal QA/CI Demo - Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '⚠️ Completed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **FastAPI Application**: Pydantic validation and error handling" >> $GITHUB_STEP_SUMMARY
        echo "- **API Endpoints**: Health checks, user creation, and validation" >> $GITHUB_STEP_SUMMARY
        echo "- **Error Handling**: Input validation and edge cases" >> $GITHUB_STEP_SUMMARY
        echo "- **Security**: Dependency vulnerability scanning" >> $GITHUB_STEP_SUMMARY