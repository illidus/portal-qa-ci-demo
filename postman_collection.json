{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "Portal Map Tile API",
		"description": "Collection for testing Portal API endpoints with authentication and validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{api_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "api_token",
			"value": "demo_api_token_12345",
			"type": "string"
		},
		{
			"key": "test_tile_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health Checks",
			"item": [
				{
					"name": "Basic Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": ["{{base_url}}"],
							"path": [""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Detailed Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/",
							"host": ["{{base_url}}"],
							"path": ["health", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Health metrics are present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('metrics');",
									"    pm.expect(jsonData).to.have.property('dependencies');",
									"    pm.expect(jsonData.dependencies.rasterio).to.eql('available');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Authentication Tests",
			"item": [
				{
					"name": "Access Without Token",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tiles/",
							"host": ["{{base_url}}"],
							"path": ["tiles", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Access With Invalid Token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "invalid_token_123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tiles/",
							"host": ["{{base_url}}"],
							"path": ["tiles", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Tile Management",
			"item": [
				{
					"name": "Create Tile",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"x\": 1024,\n    \"y\": 768,\n    \"z\": 10,\n    \"layer\": \"soil_properties\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tiles/",
							"host": ["{{base_url}}"],
							"path": ["tiles", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tile created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('tile_id');",
									"    pm.expect(jsonData).to.have.property('bounds');",
									"    pm.expect(jsonData.bounds).to.be.an('array').that.has.lengthOf(4);",
									"    ",
									"    // Store tile ID for subsequent tests",
									"    pm.collectionVariables.set('test_tile_id', jsonData.tile_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Tile Metadata",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tiles/{{test_tile_id}}",
							"host": ["{{base_url}}"],
							"path": ["tiles", "{{test_tile_id}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tile metadata is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.tile_id).to.eql(pm.collectionVariables.get('test_tile_id'));",
									"    pm.expect(jsonData).to.have.property('crs');",
									"    pm.expect(jsonData).to.have.property('creation_time');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Tiles",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tiles/?limit=10",
							"host": ["{{base_url}}"],
							"path": ["tiles", ""],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns array of tiles\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('tile_id');",
									"        pm.expect(jsonData[0]).to.have.property('bounds');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Validate Tile Request Schema",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"x\": -1,\n    \"y\": 768,\n    \"z\": 25,\n    \"layer\": \"invalid_layer\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tiles/",
							"host": ["{{base_url}}"],
							"path": ["tiles", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 (Validation Error)\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validation error details provided\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Raster Analysis",
			"item": [
				{
					"name": "Analyze Raster File",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "sample_raster.tif",
									"description": "Upload a sample raster file for analysis"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/raster/analyze/",
							"host": ["{{base_url}}"],
							"path": ["raster", "analyze", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 422\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 422]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Raster analysis results are valid\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('band_count');",
									"        pm.expect(jsonData).to.have.property('width');",
									"        pm.expect(jsonData).to.have.property('height');",
									"        pm.expect(jsonData).to.have.property('bounds');",
									"        pm.expect(jsonData.bounds).to.be.an('array').that.has.lengthOf(4);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Webhook Management",
			"item": [
				{
					"name": "Get Webhook Events",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webhooks/events/?limit=5",
							"host": ["{{base_url}}"],
							"path": ["webhooks", "events", ""],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns array of events\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('event_type');",
									"        pm.expect(jsonData[0]).to.have.property('timestamp');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Simulate Webhook Event",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event_type\": \"test_event\",\n    \"tile_id\": \"test_tile_123\",\n    \"timestamp\": \"2023-08-20T10:30:00Z\",\n    \"payload\": {\n        \"test\": \"data\",\n        \"processing_time\": 1.5\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/webhooks/simulate/",
							"host": ["{{base_url}}"],
							"path": ["webhooks", "simulate", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event simulated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('simulated successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Filter Events by Type",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/webhooks/events/?event_type=tile_created&limit=10",
							"host": ["{{base_url}}"],
							"path": ["webhooks", "events", ""],
							"query": [
								{
									"key": "event_type",
									"value": "tile_created"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All events have correct type\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    jsonData.forEach(function(event) {",
									"        if (event.event_type) {",
									"            pm.expect(event.event_type).to.eql('tile_created');",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete Test Tile",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tiles/{{test_tile_id}}",
							"host": ["{{base_url}}"],
							"path": ["tiles", "{{test_tile_id}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tile deleted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('deleted successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		}
	]
}